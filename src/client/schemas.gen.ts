// This file is auto-generated by @hey-api/openapi-ts

export const UpdateWorkflowDetailsCommandSchema = {
  type: "object",
  properties: {
    workflowName: {
      type: "string",
      description:
        "Optional new name for the workflow. If not provided, the name will not be changed",
    },
    workflowDescription: {
      type: "string",
      description:
        "Optional new description for the workflow. If not provided, the description will not be changed",
    },
  },
  description: "Request to update workflow details",
  example: {
    workflowName: "Updated Workflow Name",
    workflowDescription: "Updated workflow description",
  },
} as const;

export const Standard_Workflow86_ExceptionSchema = {
  type: "object",
  properties: {
    httpStatus: {
      type: "integer",
      description: "HTTP Status code (matching the status of the response)",
      format: "int32",
    },
    errorId: {
      type: "string",
      description: "Error ID to be quoted in any potential support requests",
    },
    message: {
      type: "string",
      description: "Message containing details of the problem",
    },
    retryable: {
      type: "string",
      description: "Whether this issue can usefully be retried",
    },
  },
} as const;

export const ColumnDetailsSchema = {
  required: ["columnId", "columnName", "columnType"],
  type: "object",
  properties: {
    columnId: {
      type: "string",
      description: "The UUID identifier of the column",
    },
    columnName: {
      type: "string",
      description: "The column name",
    },
    columnType: {
      type: "string",
      description: "The column type",
      enum: ["DECIMAL", "VARCHAR2", "BOOLEAN", "DATETIME", "LIST"],
    },
  },
  description: "The columns in the schema of this Table",
} as const;

export const ComponentDetailsSchema = {
  required: [
    "componentId",
    "configuration",
    "description",
    "inputPlaceholders",
    "name",
    "nextComponents",
    "type",
    "validationErrors",
  ],
  type: "object",
  properties: {
    componentId: {
      type: "string",
      description: "UUID identifier of the Component",
    },
    type: {
      type: "string",
      description: "Type of the Component",
    },
    name: {
      type: "string",
      description: "Name of the Component",
    },
    description: {
      type: "string",
      description: "Description of the Component",
    },
    nextComponents: {
      type: "array",
      description:
        "UUID IDs of the components that will be executed after this one",
      items: {
        type: "string",
        description:
          "UUID IDs of the components that will be executed after this one",
      },
    },
    inputPlaceholders: {
      type: "object",
      additionalProperties: {
        type: "string",
        description: "Placeholders used as input by this component",
      },
      description: "Placeholders used as input by this component",
    },
    configuration: {
      type: "object",
      additionalProperties: {
        type: "object",
        description: "Component-type specific configuration structure",
      },
      description: "Component-type specific configuration structure",
    },
    validationErrors: {
      type: "array",
      description:
        "Any Validation Errors from parsing this component configuration",
      items: {
        type: "string",
        description:
          "Any Validation Errors from parsing this component configuration",
      },
    },
  },
  description: "The components that make up this workflow",
} as const;

export const TableDetailsSchema = {
  required: ["_links", "columns", "name", "tableId"],
  type: "object",
  properties: {
    tableId: {
      type: "string",
      description: "The id of the Workflow86 Table",
    },
    name: {
      type: "string",
      description: "The name of the Workflow86 Table",
    },
    tableAppViewUrl: {
      type: "string",
      description: "The URL to view this table in a browser (requires login)",
    },
    columns: {
      type: "array",
      description: "The columns in the schema of this Table",
      items: {
        $ref: "#/components/schemas/ColumnDetails",
      },
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
  description: "The tables referenced by this workflow",
} as const;

export const WorkflowVersionDetailsSchema = {
  required: [
    "_links",
    "components",
    "description",
    "name",
    "status",
    "tables",
    "version",
    "workflowAppViewUrl",
    "workflowId",
  ],
  type: "object",
  properties: {
    workflowId: {
      type: "string",
      description: "UUID identifier of this workflow version",
    },
    version: {
      type: "integer",
      description: "The integer version of this workflow version",
      format: "int32",
    },
    status: {
      type: "string",
      description: "The lifecycle status of this workflow version",
      enum: ["PUBLISHED", "DRAFT", "ARCHIVED", "DELETED"],
    },
    name: {
      type: "string",
      description: "The name of this workflow",
    },
    description: {
      type: "string",
      description: "The description of this workflow",
    },
    components: {
      type: "array",
      description: "The components that make up this workflow",
      items: {
        $ref: "#/components/schemas/ComponentDetails",
      },
    },
    tables: {
      type: "array",
      description: "The tables referenced by this workflow",
      items: {
        $ref: "#/components/schemas/TableDetails",
      },
    },
    workflowAppViewUrl: {
      type: "string",
      description:
        "The URL to view this workflow in a browser (requires login)",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
} as const;

export const UnpublishWorkflowResponseSchema = {
  type: "object",
  properties: {
    workflowId: {
      type: "string",
      description: "UUID identifier of the workflow unpublished",
    },
    draftVersion: {
      type: "integer",
      description: "The new draft version number",
      format: "int32",
    },
  },
} as const;

export const RunWorkflowCommandSchema = {
  required: ["componentId"],
  type: "object",
  properties: {
    componentId: {
      type: "string",
      description: "UUID identifier of the component to start running from",
      example: "3fa85f64-5717-4562-b3fc-2c960000afa6",
    },
    workflowVersion: {
      type: "string",
      description:
        "Workflow version to run. It could be a integer version or 'DRAFT' or 'PUBLISHED'. If DRAFT OR PUBLISHED, will run latest version of the project with the respective status",
    },
    placeholderValues: {
      type: "object",
      additionalProperties: {
        type: "object",
        description: `A object containing placeholder keys and values to override values from the original session.
- Keys must be from the set of placeholders available to the specified component.
- All keys are optional at the API level, but omitting them may of course cause the workflow to fail.
- Values are validated against the placeholder type.
- datetime placeholders MUST be in ISO-8601 format, but may omit timezone, offset, or the whole time portion.
- list placeholders MUST EITHER be sent as a JSON List or a Bracketed String (see example).
- Values may not be sent as JSON objects, instead keys should use dotted form.`,
        example: {
          aDate: "2025-05-27",
          aDateTime: "2025-05-27T23:04:16Z",
          aOffsetDateTime: "2025-05-27T23:04:16−12:00",
          aDateTimeWithTimeZone: "2025-05-27T23:04:16−12:00[Australia/Sydney]",
          aJsonList: ["blue", "green", "black"],
          aBracketedString: "[blue,green,black]",
          "aDottedField.answer": "input",
        },
      },
      description: `A object containing placeholder keys and values to override values from the original session.
- Keys must be from the set of placeholders available to the specified component.
- All keys are optional at the API level, but omitting them may of course cause the workflow to fail.
- Values are validated against the placeholder type.
- datetime placeholders MUST be in ISO-8601 format, but may omit timezone, offset, or the whole time portion.
- list placeholders MUST EITHER be sent as a JSON List or a Bracketed String (see example).
- Values may not be sent as JSON objects, instead keys should use dotted form.`,
      example: {
        aDate: "2025-05-27",
        aDateTime: "2025-05-27T23:04:16Z",
        aOffsetDateTime: "2025-05-27T23:04:16−12:00",
        aDateTimeWithTimeZone: "2025-05-27T23:04:16−12:00[Australia/Sydney]",
        aJsonList: ["blue", "green", "black"],
        aBracketedString: "[blue,green,black]",
        "aDottedField.answer": "input",
      },
    },
  },
  description: "A command for starting a workflow",
} as const;

export const RunWorkflowResponseSchema = {
  type: "object",
  properties: {
    sessionId: {
      type: "string",
      description: "UUID identifier of the session started",
    },
    sessionMode: {
      type: "string",
      description: "The execution mode of session started",
      enum: ["PROD", "TEST"],
    },
    workflowId: {
      type: "string",
      description: "UUID identifier of the workflow started (echoed)",
    },
    workflowVersion: {
      type: "integer",
      description: "The integer version of the workflow started (echoed)",
      format: "int32",
    },
    componentId: {
      type: "string",
      description: "UUID identifier of the component started (echoed)",
    },
    workflowAppViewUrl: {
      type: "string",
      description:
        "The URL to view this workflow in a browser (requires login)",
    },
    sessionAppViewUrl: {
      type: "string",
      description: "The URL to view this session in a browser (requires login)",
    },
    placeholderValues: {
      type: "object",
      additionalProperties: {
        type: "string",
        description:
          "Normalized values of the placeholders provided in the input",
      },
      description:
        "Normalized values of the placeholders provided in the input",
    },
    originalSessionId: {
      type: "string",
      description: "Session id the workflow ran from",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
  description: "A response when starting a workflow",
  example: {
    workflowId: "5fc4c4f9-cef0-44d5-861c-c0af00008b28",
    componentId: "e1170860-0b58-44d7-8e21-49fb00009c7f",
    placeholderValues: {
      key: "value",
    },
    sessionId: "3aa378d1-c45f-448f-b543-d5490000742a",
  },
} as const;

export const RerunWorkflowCommandSchema = {
  required: ["componentId", "originalSessionId"],
  type: "object",
  properties: {
    componentId: {
      type: "string",
      description: "UUID identifier of the component to start running from",
      example: "3fa85f64-5717-4562-b3fc-2c960000afa6",
    },
    workflowVersion: {
      type: "string",
      description:
        "Workflow version to run. It could be a integer version or 'DRAFT' or 'PUBLISHED'. If DRAFT OR PUBLISHED, will run latest version of the project with the respective status",
    },
    originalSessionId: {
      type: "string",
      description:
        "The session ID that this workflow is running from. Will also use all the placeholder values from this session",
      example: "3fa85f64-5717-4562-b3fc-2c960000afa6",
    },
  },
  description: "A command for rerunning a workflow from an existing session",
} as const;

export const PublishWorkflowCommandSchema = {
  type: "object",
  properties: {
    comment: {
      type: "string",
      description: "Comment describing the changes in this publication",
      example: "Fixed validation bug in email component",
    },
    description: {
      type: "string",
      description: "Normative description of this workflow",
    },
  },
} as const;

export const PublishWorkflowResponseSchema = {
  type: "object",
  properties: {
    workflowId: {
      type: "string",
      description: "UUID identifier of the workflow published",
    },
    publishedVersion: {
      type: "integer",
      description: "The new published version number",
      format: "int32",
    },
    draftVersion: {
      type: "integer",
      description: "The new draft version number",
      format: "int32",
    },
  },
} as const;

export const GenerateWorkflowResponseSchema = {
  type: "object",
  properties: {
    sessionId: {
      type: "string",
      description:
        "Session ID created for polling the result. Present when success is true",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
  description:
    "Response for generate-workflow-plan API that generates a workflow edit plan",
  example: `Success: {
  "sessionId": "3aa378d1-c45f-448f-b543-d5490000742a"
}
`,
} as const;

export const CreateColumnCommandSchema = {
  required: ["columnName", "columnType"],
  type: "object",
  properties: {
    columnName: {
      type: "string",
      description: "The column name",
    },
    columnType: {
      type: "string",
      description: "The column type",
      enum: ["DECIMAL", "VARCHAR2", "BOOLEAN", "DATETIME", "LIST"],
    },
  },
  description: "Array of column definitions",
} as const;

export const CreateTableCommandSchema = {
  required: ["columns", "tableName"],
  type: "object",
  properties: {
    tableName: {
      type: "string",
      description: "The name of the table to create",
    },
    columns: {
      type: "array",
      description: "Array of column definitions",
      items: {
        $ref: "#/components/schemas/CreateColumnCommand",
      },
    },
  },
} as const;

export const ComponentResultSchema = {
  required: [
    "componentId",
    "componentName",
    "componentType",
    "errorMessage",
    "nextResults",
    "nodeInput",
    "nodeOutput",
    "resultId",
    "status",
    "thread",
  ],
  type: "object",
  properties: {
    resultId: {
      type: "string",
      description: "UUID identifier of this Component Result",
    },
    componentId: {
      type: "string",
      description: "UUID identifier of the Component this result is for",
    },
    componentType: {
      type: "string",
      description: "The type of the Component this result is for",
    },
    componentName: {
      type: "string",
      description: "The name of the Component this result is for",
    },
    thread: {
      type: "string",
      description:
        "The thread this Component was run in - either 'root' or a UUID identifier",
    },
    status: {
      type: "string",
      description: "The status of the execution of this Component",
      enum: [
        "IN_PROGRESS",
        "SUCCESSFUL",
        "WAITING",
        "FAILED",
        "TERMINATED",
        "OUT_OF_QUOTA",
      ],
    },
    errorMessage: {
      type: "string",
      description: "The error message generated if status=FAILED",
    },
    nodeInput: {
      $ref: "#/components/schemas/JsonNode",
    },
    nodeOutput: {
      $ref: "#/components/schemas/JsonNode",
    },
    nextResults: {
      type: "array",
      description: "The resultIds of the following results in the result graph",
      items: {
        type: "string",
        description:
          "The resultIds of the following results in the result graph",
      },
    },
    pendingFormAppViewUrl: {
      type: "string",
      description:
        "The URL of any form waiting to be submitted to complete this Component",
    },
    submittedFormAppViewUrl: {
      type: "string",
      description:
        "The URL of any form that has been submitted as part of this Component's execution",
    },
    startedAt: {
      type: "string",
      description: "Timestamp when the component execution started",
      format: "date-time",
    },
    updatedAt: {
      type: "string",
      description: "Timestamp when the component execution was last updated",
      format: "date-time",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
  description: "Flattened representation of the component result graph",
} as const;

export const JsonNodeSchema = {
  type: "object",
  description: "The JSON result that was output from this execution",
} as const;

export const SessionResultSchema = {
  required: [
    "componentResults",
    "sessionId",
    "sessionMode",
    "startedAt",
    "status",
    "updatedAt",
    "workflowId",
    "workflowVersion",
  ],
  type: "object",
  properties: {
    sessionId: {
      type: "string",
      description: "UUID identifier of the session returned",
    },
    sessionMode: {
      type: "string",
      description: "The execution mode of this session.",
      enum: ["PROD", "TEST"],
    },
    status: {
      type: "string",
      description: "The overall session status",
      enum: [
        "IN_PROGRESS",
        "SUCCESSFUL",
        "WAITING",
        "FAILED",
        "TERMINATED",
        "OUT_OF_QUOTA",
      ],
    },
    workflowId: {
      type: "string",
      description: "UUID identifier of the workflow this session belongs to",
    },
    workflowVersion: {
      type: "integer",
      description:
        "The integer version of the workflow this session belongs to",
      format: "int32",
    },
    workflowAppViewUrl: {
      type: "string",
      description:
        "The URL to view this workflow in a browser (requires login)",
    },
    sessionAppViewUrl: {
      type: "string",
      description: "The URL to view this session in a browser (requires login)",
    },
    startedAt: {
      type: "string",
      description: "Timestamp when the session was started",
      format: "date-time",
    },
    updatedAt: {
      type: "string",
      description: "Timestamp when the session was last updated",
      format: "date-time",
    },
    componentResults: {
      type: "array",
      description: "Flattened representation of the component result graph",
      items: {
        $ref: "#/components/schemas/ComponentResult",
      },
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
  description: "JSON representation of a Workflow Session",
  example: `{
  "sessionId": "9e3bba1a-7be4-4e6c-ac16-448500008913",
  "status": "IN_PROGRESS",
  "workflowId": "3aa378d1-c45f-448f-b543-d5490000742a"
  "workflowVersion": 7
  "componentResults": [{
    "resultId": "148f4835-b73c-d5bd-7df2-bcae00000ee0",
    "componentId": "c058d094-6499-4b81-b3c3-592e00006fdb",
    "componentType": "loop_through_list",
    "componentName": "Loop",
    "status": "SUCCESSFUL",
    "nodeInput": [
      {
        "key": "index",
        "list": "[1, 2, 3]"
      }
    ],
    "nodeOutput": {
      "i": ["1","2","3"]
    },  }]
}`,
} as const;

export const RetryWorkflowResponseSchema = {
  type: "object",
  properties: {
    sessionId: {
      type: "string",
      description: "UUID identifier of the session started",
    },
    sessionMode: {
      type: "string",
      description: "The execution mode of session started",
      enum: ["PROD", "TEST"],
    },
    workflowId: {
      type: "string",
      description: "UUID identifier of the workflow started (echoed)",
    },
    workflowVersion: {
      type: "integer",
      description: "The integer version of the workflow started (echoed)",
      format: "int32",
    },
    componentId: {
      type: "string",
      description: "UUID identifier of the component started (echoed)",
    },
    workflowAppViewUrl: {
      type: "string",
      description:
        "The URL to view this workflow in a browser (requires login)",
    },
    sessionAppViewUrl: {
      type: "string",
      description: "The URL to view this session in a browser (requires login)",
    },
    threadId: {
      type: "string",
      description:
        "UUID identifier of the thread being retried. Defaults to 'root' if no thread is given or needed",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
  description: "A response when retrying a failed component",
  example: {
    workflowId: "5fc4c4f9-cef0-44d5-861c-c0af00008b28",
    componentId: "e1170860-0b58-44d7-8e21-49fb00009c7f",
    threadId: "thread-uuid-123",
    sessionId: "3aa378d1-c45f-448f-b543-d5490000742a",
  },
} as const;

export const PageOfWorkflowSummarySchema = {
  required: ["_embedded", "_lastPage", "_links", "_pageNumber"],
  type: "object",
  properties: {
    _embedded: {
      type: "array",
      description: "The page of response data as an array",
      items: {
        $ref: "#/components/schemas/WorkflowSummary",
      },
    },
    _pageNumber: {
      type: "integer",
      description: "The zero-indexed page number of the response data",
      format: "int32",
    },
    _lastPage: {
      type: "boolean",
      description: "True if this page is the final page",
    },
    get_totalCount: {
      type: "integer",
      description: "Total number of results matching the query",
      format: "int64",
    },
    hasMorePages: {
      type: "boolean",
      description:
        "True if there are more pages available beyond this one. Keep proceeding to the next page until hasMorePages is false",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
} as const;

export const WorkflowSummarySchema = {
  required: [
    "_links",
    "description",
    "draftVersion",
    "name",
    "published",
    "workflowId",
  ],
  type: "object",
  properties: {
    workflowId: {
      type: "string",
      description: "UUID identifier of this workflow",
    },
    name: {
      type: "string",
      description: "The name of this workflow",
    },
    description: {
      type: "string",
      description: "The description of this workflow",
    },
    published: {
      type: "boolean",
      description:
        "true if this workflow has been published, false if this workflow is still in draft",
    },
    draftVersion: {
      type: "integer",
      description: "The integer version of this workflows current draft",
      format: "int32",
    },
    publishedVersion: {
      type: "integer",
      description:
        'The integer version of this workflows current published version, if it has been published"',
      format: "int32",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
  description: "The page of response data as an array",
} as const;

export const PageOfSessionSummarySchema = {
  required: ["_embedded", "_lastPage", "_links", "_pageNumber"],
  type: "object",
  properties: {
    _embedded: {
      type: "array",
      description: "The page of response data as an array",
      items: {
        $ref: "#/components/schemas/SessionSummary",
      },
    },
    _pageNumber: {
      type: "integer",
      description: "The zero-indexed page number of the response data",
      format: "int32",
    },
    _lastPage: {
      type: "boolean",
      description: "True if this page is the final page",
    },
    get_totalCount: {
      type: "integer",
      description: "Total number of results matching the query",
      format: "int64",
    },
    hasMorePages: {
      type: "boolean",
      description:
        "True if there are more pages available beyond this one. Keep proceeding to the next page until hasMorePages is false",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
} as const;

export const SessionSummarySchema = {
  required: [
    "sessionId",
    "sessionMode",
    "startedAt",
    "status",
    "updatedAt",
    "workflowId",
    "workflowVersion",
  ],
  type: "object",
  properties: {
    sessionId: {
      type: "string",
      description: "UUID identifier of the session returned",
    },
    sessionMode: {
      type: "string",
      description: "The execution mode of this session.",
      enum: ["PROD", "TEST"],
    },
    status: {
      type: "string",
      description: "The overall session status",
      enum: [
        "IN_PROGRESS",
        "SUCCESSFUL",
        "WAITING",
        "FAILED",
        "TERMINATED",
        "OUT_OF_QUOTA",
      ],
    },
    workflowId: {
      type: "string",
      description: "UUID identifier of the workflow this session belongs to",
    },
    workflowVersion: {
      type: "integer",
      description:
        "The integer version of the workflow this session belongs to",
      format: "int32",
    },
    workflowAppViewUrl: {
      type: "string",
      description:
        "The URL to view this workflow in a browser (requires login)",
    },
    sessionAppViewUrl: {
      type: "string",
      description: "The URL to view this session in a browser (requires login)",
    },
    startedAt: {
      type: "string",
      description: "Timestamp when the session was started",
      format: "date-time",
    },
    updatedAt: {
      type: "string",
      description: "Timestamp when the session was last updated",
      format: "date-time",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
  description: "The page of response data as an array",
} as const;

export const PageOfWorkflowHistorySchema = {
  required: ["_embedded", "_lastPage", "_links", "_pageNumber"],
  type: "object",
  properties: {
    _embedded: {
      type: "array",
      description: "The page of response data as an array",
      items: {
        $ref: "#/components/schemas/WorkflowHistory",
      },
    },
    _pageNumber: {
      type: "integer",
      description: "The zero-indexed page number of the response data",
      format: "int32",
    },
    _lastPage: {
      type: "boolean",
      description: "True if this page is the final page",
    },
    get_totalCount: {
      type: "integer",
      description: "Total number of results matching the query",
      format: "int64",
    },
    hasMorePages: {
      type: "boolean",
      description:
        "True if there are more pages available beyond this one. Keep proceeding to the next page until hasMorePages is false",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
} as const;

export const WorkflowHistorySchema = {
  required: ["_links", "description", "name", "status", "version"],
  type: "object",
  properties: {
    version: {
      type: "integer",
      description: "The integer version of this workflow version",
      format: "int32",
    },
    name: {
      type: "string",
      description: "The name of this workflow",
    },
    description: {
      type: "string",
      description: "The description of this workflow",
    },
    status: {
      type: "string",
      description: "The lifecycle status of this workflow version",
      enum: ["PUBLISHED", "DRAFT", "ARCHIVED", "DELETED"],
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
  description: "The page of response data as an array",
} as const;

export const ComponentPlanDtoSchema = {
  type: "object",
  properties: {
    componentId: {
      type: "integer",
      format: "int32",
    },
    componentType: {
      type: "string",
    },
    componentTitle: {
      type: "string",
    },
    componentDescription: {
      type: "string",
    },
    inputPlaceholders: {
      type: "array",
      items: {
        type: "string",
      },
    },
    outputPlaceholders: {
      type: "array",
      items: {
        type: "string",
      },
    },
    path: {
      type: "string",
    },
    previousComponents: {
      type: "array",
      items: {
        type: "integer",
        format: "int32",
      },
    },
    nextComponents: {
      type: "array",
      items: {
        type: "integer",
        format: "int32",
      },
    },
    parentBranchPath: {
      type: "integer",
      format: "int32",
    },
    childPaths: {
      type: "array",
      items: {
        type: "integer",
        format: "int32",
      },
    },
    pathCondition: {
      type: "string",
    },
    mergeCondition: {
      type: "string",
    },
    triggerStartComponent: {
      type: "integer",
      format: "int32",
    },
    triggerEndComponent: {
      type: "integer",
      format: "int32",
    },
    infiniteLoopCheck: {
      type: "boolean",
    },
    credential: {
      type: "string",
    },
    downstreamForms: {
      type: "array",
      items: {
        type: "integer",
        format: "int32",
      },
    },
    componentDatabase: {
      type: "array",
      items: {
        type: "string",
      },
    },
    componentDatabaseCols: {
      type: "array",
      items: {
        type: "string",
      },
    },
    updateRowIdSource: {
      type: "string",
    },
    updateRowId: {
      type: "string",
    },
  },
  description:
    "Use delete-component to remove unwanted components from draft workflows",
} as const;

export const DatabaseColumnPlanDtoSchema = {
  type: "object",
  properties: {
    databaseColumnId: {
      type: "string",
    },
    databaseColumnName: {
      type: "string",
    },
    databaseColumnType: {
      type: "string",
    },
  },
} as const;

export const DatabasePlanDtoSchema = {
  type: "object",
  properties: {
    databaseID: {
      type: "string",
    },
    databaseName: {
      type: "string",
    },
    componentLink: {
      type: "array",
      items: {
        type: "integer",
        format: "int32",
      },
    },
    columns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DatabaseColumnPlanDto",
      },
    },
    existing: {
      type: "boolean",
    },
  },
  description:
    "Use add-column, rename-column, or delete-column to modify existing tables",
} as const;

export const GetWorkflowPlanResponseSchema = {
  type: "object",
  properties: {
    status: {
      type: "string",
      description: "Current status of the workflow plan generation",
      enum: ["IN_PROGRESS", "SUCCESS", "IN_PROGRESS", "SUCCESS"],
    },
    workflowId: {
      type: "string",
      description:
        "The ID of the workflow being generated/edited, if applicable",
    },
    response: {
      $ref: "#/components/schemas/WorkflowPlanResponseDto",
    },
    sessionId: {
      type: "string",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
        description: "Navigation links for workflow operations",
      },
      description: "Navigation links for workflow operations",
    },
  },
  description:
    "Response for get-workflow-plan API that retrieves the status and results of a workflow plan generation",
  example:
    'In Progress: {\\n  \\"status\\": \\"IN_PROGRESS\\",\\n  \\"sessionId\\": \\"abc123-def456-ghi789\\"\\n}\\nSuccess with Questions: {\\n  \\"status\\": \\"SUCCESS\\",\\n  \\"workflowId\\": \\"69cac94a-2fac-4dcc-98e7-5dfc5a051fbe\\",\\n  \\"sessionId\\": \\"abc123-def456-ghi789\\",\\n  \\"response\\": {\\\\\\"chatTitle\\\\\\":\\\\\\"Property Inspection\\\\\\",\\\\\\"action\\\\\\":\\\\\\"question\\\\\\",\\\\\\"questions\\\\\\":[\\\\\\"Which calendar system?\\\\\\",\\\\\\"How to receive requests?\\\\\\"]}\\n}\\nSuccess with Plan: {\\n  \\"status\\": \\"SUCCESS\\",\\n  \\"workflowId\\": \\"69cac94a-2fac-4dcc-98e7-5dfc5a051fbe\\",\\n  \\"sessionId\\": \\"abc123-def456-ghi789\\",\\n  \\"response\\": {\\\\\\"chatTitle\\\\\\":\\\\\\"Lead Capture\\\\\\",\\\\\\"action\\\\\\":\\\\\\"propose\\\\\\",\\\\\\"newComponents\\\\\\":[...]}\\n}',
} as const;

export const UpdateComponentPlanDtoSchema = {
  type: "object",
  properties: {
    componentId: {
      type: "integer",
      format: "int32",
    },
    componentType: {
      type: "string",
    },
    componentTitle: {
      type: "string",
    },
    componentDescription: {
      type: "string",
    },
    inputPlaceholders: {
      type: "array",
      items: {
        type: "string",
      },
    },
    outputPlaceholders: {
      type: "array",
      items: {
        type: "string",
      },
    },
    path: {
      type: "string",
    },
    previousComponents: {
      type: "array",
      items: {
        type: "integer",
        format: "int32",
      },
    },
    nextComponents: {
      type: "array",
      items: {
        type: "integer",
        format: "int32",
      },
    },
    parentBranchPath: {
      type: "integer",
      format: "int32",
    },
    childPaths: {
      type: "array",
      items: {
        type: "integer",
        format: "int32",
      },
    },
    pathCondition: {
      type: "string",
    },
    mergeCondition: {
      type: "string",
    },
    triggerStartComponent: {
      type: "integer",
      format: "int32",
    },
    triggerEndComponent: {
      type: "integer",
      format: "int32",
    },
    infiniteLoopCheck: {
      type: "boolean",
    },
    credential: {
      type: "string",
    },
    downstreamForms: {
      type: "array",
      items: {
        type: "integer",
        format: "int32",
      },
    },
    componentDatabase: {
      type: "array",
      items: {
        type: "string",
      },
    },
    componentDatabaseCols: {
      type: "array",
      items: {
        type: "string",
      },
    },
    updateRowIdSource: {
      type: "string",
    },
    updateRowId: {
      type: "string",
    },
    editInstructions: {
      type: "string",
    },
    editConnectionsOnly: {
      type: "boolean",
    },
  },
  description: "Use generate-component tool to update existing components",
} as const;

export const WorkflowPlanResponseDtoSchema = {
  type: "object",
  properties: {
    chatTitle: {
      type: "string",
    },
    workflowName: {
      type: "string",
    },
    action: {
      type: "string",
    },
    ambiguity: {
      type: "string",
    },
    questions: {
      type: "array",
      description:
        "Ask questions to the user. Use mcp_workflow86_generate-workflow-plan with additional context to address any clarifying questions",
      items: {
        type: "string",
        description:
          "Ask questions to the user. Use mcp_workflow86_generate-workflow-plan with additional context to address any clarifying questions",
      },
    },
    assume: {
      type: "array",
      description: "Assumptions in the generated plan.",
      items: {
        type: "string",
        description: "Assumptions in the generated plan.",
      },
    },
    explanation: {
      type: "string",
    },
    editActionsSummary: {
      type: "array",
      description: "Summary of actions to implement the plan.",
      items: {
        type: "string",
        description: "Summary of actions to implement the plan.",
      },
    },
    newPlaceholders: {
      type: "array",
      description: "Placeholders that will be created.",
      items: {
        type: "string",
        description: "Placeholders that will be created.",
      },
    },
    obsoletePlaceholders: {
      type: "array",
      description: "Placeholders that are now obsolete.",
      items: {
        type: "string",
        description: "Placeholders that are now obsolete.",
      },
    },
    newComponents: {
      type: "array",
      description: "Use generate-component tool to build new components",
      items: {
        $ref: "#/components/schemas/ComponentPlanDto",
      },
    },
    updateComponents: {
      type: "array",
      description: "Use generate-component tool to update existing components",
      items: {
        $ref: "#/components/schemas/UpdateComponentPlanDto",
      },
    },
    removeComponents: {
      type: "array",
      description:
        "Use delete-component to remove unwanted components from draft workflows",
      items: {
        $ref: "#/components/schemas/ComponentPlanDto",
      },
    },
    newDatabases: {
      type: "array",
      description:
        "Use create-table to create each database, then add-column configuring columns",
      items: {
        $ref: "#/components/schemas/DatabasePlanDto",
      },
    },
    removeDatabases: {
      type: "array",
      description:
        "No direct tool available - database removal must be done manually in Workflow86 UI",
      items: {
        $ref: "#/components/schemas/DatabasePlanDto",
      },
    },
    updatedDatabases: {
      type: "array",
      description:
        "Use add-column, rename-column, or delete-column to modify existing tables",
      items: {
        $ref: "#/components/schemas/DatabasePlanDto",
      },
    },
  },
  description: "Parsed AI response with structured workflow plan or questions",
} as const;

export const PageOfTaskSummarySchema = {
  required: ["_embedded", "_lastPage", "_links", "_pageNumber"],
  type: "object",
  properties: {
    _embedded: {
      type: "array",
      description: "The page of response data as an array",
      items: {
        $ref: "#/components/schemas/TaskSummary",
      },
    },
    _pageNumber: {
      type: "integer",
      description: "The zero-indexed page number of the response data",
      format: "int32",
    },
    _lastPage: {
      type: "boolean",
      description: "True if this page is the final page",
    },
    get_totalCount: {
      type: "integer",
      description: "Total number of results matching the query",
      format: "int64",
    },
    hasMorePages: {
      type: "boolean",
      description:
        "True if there are more pages available beyond this one. Keep proceeding to the next page until hasMorePages is false",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
} as const;

export const TaskSummarySchema = {
  type: "object",
  properties: {
    taskName: {
      type: "string",
      description: "The name of the task",
    },
    taskDescription: {
      type: "string",
      description: "The description of the task",
    },
    workflowId: {
      type: "string",
      description: "The workflow ID of the workflow that sent this task",
    },
    workflowName: {
      type: "string",
      description: "The name of the workflow",
    },
    sessionId: {
      type: "string",
      description:
        "The session ID of the session of the workflow that assigned this task",
    },
    formSessionAppViewUrl: {
      type: "string",
      description:
        "The URL to open this form session in a browser (requires login)",
    },
    taskAppViewUrl: {
      type: "string",
      description: "The URL to open this task in a browser (requires login)",
    },
  },
  description:
    "A summary of a task being requested. Usually comes in a list of these.",
  example: {
    taskName: "Review Document",
    taskDescription: "Please review the attached document and provide feedback",
    taskUrl:
      "https://api.workflow86.com/v1/session/3aa378d1-c45f-448f-b543-d5490000742a/task/task-123",
    workflowId: "5fc4c4f9-cef0-44d5-861c-c0af00008b28",
    workflowName: "Document Review Process",
    sessionId: "3aa378d1-c45f-448f-b543-d5490000742a",
  },
} as const;

export const PageOfTableSummarySchema = {
  required: ["_embedded", "_lastPage", "_links", "_pageNumber"],
  type: "object",
  properties: {
    _embedded: {
      type: "array",
      description: "The page of response data as an array",
      items: {
        $ref: "#/components/schemas/TableSummary",
      },
    },
    _pageNumber: {
      type: "integer",
      description: "The zero-indexed page number of the response data",
      format: "int32",
    },
    _lastPage: {
      type: "boolean",
      description: "True if this page is the final page",
    },
    get_totalCount: {
      type: "integer",
      description: "Total number of results matching the query",
      format: "int64",
    },
    hasMorePages: {
      type: "boolean",
      description:
        "True if there are more pages available beyond this one. Keep proceeding to the next page until hasMorePages is false",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
} as const;

export const TableSummarySchema = {
  required: ["_links", "name", "tableId"],
  type: "object",
  properties: {
    tableId: {
      type: "string",
      description: "The id of the Workflow86 Table",
    },
    name: {
      type: "string",
      description: "The name of the Workflow86 Table",
    },
    tableAppViewUrl: {
      type: "string",
      description: "The URL to view this table in a browser (requires login)",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
  description: "The page of response data as an array",
} as const;

export const FormSummarySchema = {
  type: "object",
  properties: {
    formName: {
      type: "string",
    },
    formAppViewUrl: {
      type: "string",
    },
    workflowId: {
      type: "string",
    },
    workflowName: {
      type: "string",
    },
  },
  description: "The page of response data as an array",
} as const;

export const PageOfFormSummarySchema = {
  required: ["_embedded", "_lastPage", "_links", "_pageNumber"],
  type: "object",
  properties: {
    _embedded: {
      type: "array",
      description: "The page of response data as an array",
      items: {
        $ref: "#/components/schemas/FormSummary",
      },
    },
    _pageNumber: {
      type: "integer",
      description: "The zero-indexed page number of the response data",
      format: "int32",
    },
    _lastPage: {
      type: "boolean",
      description: "True if this page is the final page",
    },
    get_totalCount: {
      type: "integer",
      description: "Total number of results matching the query",
      format: "int64",
    },
    hasMorePages: {
      type: "boolean",
      description:
        "True if there are more pages available beyond this one. Keep proceeding to the next page until hasMorePages is false",
    },
    _links: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
  },
} as const;
