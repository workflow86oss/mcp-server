// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  RunWorkflowData,
  RerunWorkflowData,
  RunWorkflowResponses,
  RunWorkflowErrors,
  ListWorkflowsData,
  ListWorkflowsResponses,
  ListWorkflowsErrors,
  GetWorkflowData,
  GetWorkflowResponses,
  GetWorkflowErrors,
  GetWorkflowVersionData,
  GetWorkflowVersionResponses,
  GetWorkflowVersionErrors,
  ListWorkflowSessionsData,
  ListWorkflowSessionsResponses,
  ListWorkflowSessionsErrors,
  GetWorkflowSessionData,
  GetWorkflowSessionResponses,
  GetWorkflowSessionErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Run a Workflow
 * Runs a workflow component, passing in placeholders
 */
export const runWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<RunWorkflowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RunWorkflowResponses,
    RunWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/run",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List the available Workflows
 */
export const listWorkflows = <ThrowOnError extends boolean = false>(
  options?: Options<ListWorkflowsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListWorkflowsResponses,
    ListWorkflowsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow",
    ...options,
  });
};

/**
 * Get the current published Workflow
 */
export const getWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkflowResponses,
    GetWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}",
    ...options,
  });
};

/**
 * Get the current draft or published Workflow
 */
export const getWorkflowVersion = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowVersionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkflowVersionResponses,
    GetWorkflowVersionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/{version}",
    ...options,
  });
};

/**
 * List the sessions for a Workflow
 */
export const listWorkflowSessions = <ThrowOnError extends boolean = false>(
  options: Options<ListWorkflowSessionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListWorkflowSessionsResponses,
    ListWorkflowSessionsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/sessions",
    ...options,
  });
};

/**
 * Get Session Details
 * Returns the details of a workflow session
 */
export const getWorkflowSession = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkflowSessionResponses,
    GetWorkflowSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}",
    ...options,
  });
};

/**
 * Terminate Session
 * Terminates an entire workflow session
 */
export const terminateSession = <ThrowOnError extends boolean = false>(
  options: Options<{ path: { sessionId: string }; url: string }, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<any, any, ThrowOnError>({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}/terminate",
    ...options,
  });
};

/**
 * Terminate Component
 * Terminates a specific component thread in a workflow session
 */
export const terminateComponent = <ThrowOnError extends boolean = false>(
  options: Options<
    {
      path: { sessionId: string; componentId: string; threadId?: string };
      url: string;
    },
    ThrowOnError
  >,
) => {
  const url = options.path.threadId
    ? "/v1/session/{sessionId}/terminate/{componentId}/thread/{threadId}"
    : "/v1/session/{sessionId}/terminate/{componentId}";

  return (options.client ?? _heyApiClient).post<any, any, ThrowOnError>({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url,
    ...options,
  });
};

/**
 * Retry Failed Component
 * Retries a failed component thread in a workflow session
 */
export const retryFailedComponent = <ThrowOnError extends boolean = false>(
  options: Options<
    {
      path: { sessionId: string; componentId: string; threadId?: string };
      url: string;
    },
    ThrowOnError
  >,
) => {
  const url = options.path.threadId
    ? "/v1/session/{sessionId}/retry/{componentId}/thread/{threadId}"
    : "/v1/session/{sessionId}/retry/{componentId}";

  return (options.client ?? _heyApiClient).post<any, any, ThrowOnError>({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url,
    ...options,
  });
};

/**
 * Rerun Workflow Component
 * Reruns a workflow component thread in a session
 */
export const rerunWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<RerunWorkflowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RunWorkflowResponses,
    RunWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/run",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
