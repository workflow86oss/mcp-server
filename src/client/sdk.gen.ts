// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  UnpublishWorkflowData,
  UnpublishWorkflowResponses,
  UnpublishWorkflowErrors,
  RunWorkflowData,
  RunWorkflowResponses,
  RunWorkflowErrors,
  RerunWorkflowData,
  RerunWorkflowResponses,
  RerunWorkflowErrors,
  PublishWorkflowData,
  PublishWorkflowResponses,
  PublishWorkflowErrors,
  TerminateEntireSessionData,
  TerminateEntireSessionResponses,
  TerminateEntireSessionErrors,
  TerminateComponentData,
  TerminateComponentResponses,
  TerminateComponentErrors,
  TerminateComponent1Data,
  TerminateComponent1Responses,
  TerminateComponent1Errors,
  RetryFailedComponentData,
  RetryFailedComponentResponses,
  RetryFailedComponentErrors,
  RetryFailedComponent1Data,
  RetryFailedComponent1Responses,
  RetryFailedComponent1Errors,
  ListWorkflowsData,
  ListWorkflowsResponses,
  ListWorkflowsErrors,
  GetWorkflowData,
  GetWorkflowResponses,
  GetWorkflowErrors,
  GetWorkflowVersionData,
  GetWorkflowVersionResponses,
  GetWorkflowVersionErrors,
  ListWorkflowSessionsData,
  ListWorkflowSessionsResponses,
  ListWorkflowSessionsErrors,
  GetWorkflowHistoryData,
  GetWorkflowHistoryResponses,
  GetWorkflowHistoryErrors,
  GetWorkflowSessionData,
  GetWorkflowSessionResponses,
  GetWorkflowSessionErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Unpublish a Workflow
 * Unpublish an existing workflow, making it unavailable for normal execution
 */
export const unpublishWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<UnpublishWorkflowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UnpublishWorkflowResponses,
    UnpublishWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/unpublish",
    ...options,
  });
};

/**
 * Run a Workflow
 * Runs a workflow component, passing in placeholders
 */
export const runWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<RunWorkflowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RunWorkflowResponses,
    RunWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/run",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Rerun a Workflow
 * Reruns a workflow component from an existing session and will placeholders from the provided workflow session
 */
export const rerunWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<RerunWorkflowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RerunWorkflowResponses,
    RerunWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/rerun",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Publish a Workflow
 * Publish an existing workflow draft, adding a comment and description
 */
export const publishWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<PublishWorkflowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PublishWorkflowResponses,
    PublishWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/publish",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Terminate entire session
 * Terminates the entire workflow session
 */
export const terminateEntireSession = <ThrowOnError extends boolean = false>(
  options: Options<TerminateEntireSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TerminateEntireSessionResponses,
    TerminateEntireSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}/terminate",
    ...options,
  });
};

/**
 * Terminate component
 * Terminates a specific component within a workflow session
 */
export const terminateComponent = <ThrowOnError extends boolean = false>(
  options: Options<TerminateComponentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TerminateComponentResponses,
    TerminateComponentErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}/terminate/{componentId}/thread/{threadId}",
    ...options,
  });
};

/**
 * Terminate component
 * Terminates a specific component within a workflow session
 */
export const terminateComponent1 = <ThrowOnError extends boolean = false>(
  options: Options<TerminateComponent1Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TerminateComponent1Responses,
    TerminateComponent1Errors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}/terminate/{componentId}",
    ...options,
  });
};

/**
 * Retry failed component
 * Retries a failed component within a workflow session
 */
export const retryFailedComponent = <ThrowOnError extends boolean = false>(
  options: Options<RetryFailedComponentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RetryFailedComponentResponses,
    RetryFailedComponentErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}/retry/{componentId}",
    ...options,
  });
};

/**
 * Retry failed component
 * Retries a failed component within a workflow session
 */
export const retryFailedComponent1 = <ThrowOnError extends boolean = false>(
  options: Options<RetryFailedComponent1Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RetryFailedComponent1Responses,
    RetryFailedComponent1Errors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}/retry/{componentId}/thread/{threadId}",
    ...options,
  });
};

/**
 * List the available Workflows
 */
export const listWorkflows = <ThrowOnError extends boolean = false>(
  options?: Options<ListWorkflowsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListWorkflowsResponses,
    ListWorkflowsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow",
    ...options,
  });
};

/**
 * Get the current published Workflow
 */
export const getWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkflowResponses,
    GetWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}",
    ...options,
  });
};

/**
 * Get the current draft or published Workflow
 */
export const getWorkflowVersion = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowVersionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkflowVersionResponses,
    GetWorkflowVersionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/{workflowVersion}",
    ...options,
  });
};

/**
 * List the sessions for a Workflow
 */
export const listWorkflowSessions = <ThrowOnError extends boolean = false>(
  options: Options<ListWorkflowSessionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListWorkflowSessionsResponses,
    ListWorkflowSessionsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/sessions",
    ...options,
  });
};

/**
 * Get the version history of this Workflow
 */
export const getWorkflowHistory = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowHistoryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkflowHistoryResponses,
    GetWorkflowHistoryErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/history",
    ...options,
  });
};

/**
 * Get Session Details
 * Returns the details of a workflow session
 */
export const getWorkflowSession = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkflowSessionResponses,
    GetWorkflowSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}",
    ...options,
  });
};
