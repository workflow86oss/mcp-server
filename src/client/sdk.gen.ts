// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  UnpublishWorkflowData,
  UnpublishWorkflowResponses,
  UnpublishWorkflowErrors,
  RunWorkflowData,
  RunWorkflowResponses,
  RunWorkflowErrors,
  RerunWorkflowData,
  RerunWorkflowResponses,
  RerunWorkflowErrors,
  PublishWorkflowData,
  PublishWorkflowResponses,
  PublishWorkflowErrors,
  ListTablesData,
  ListTablesResponses,
  CreateTableData,
  CreateTableResponses,
  RenameColumnData,
  RenameColumnResponses,
  DeleteColumnData,
  DeleteColumnResponses,
  AddColumnData,
  AddColumnResponses,
  TerminateEntireSessionData,
  TerminateEntireSessionResponses,
  TerminateEntireSessionErrors,
  TerminateComponentData,
  TerminateComponentResponses,
  TerminateComponentErrors,
  TerminateComponent1Data,
  TerminateComponent1Responses,
  TerminateComponent1Errors,
  RetryFailedComponentData,
  RetryFailedComponentResponses,
  RetryFailedComponentErrors,
  RetryFailedComponent1Data,
  RetryFailedComponent1Responses,
  RetryFailedComponent1Errors,
  ListWorkflowsData,
  ListWorkflowsResponses,
  ListWorkflowsErrors,
  GetWorkflowData,
  GetWorkflowResponses,
  GetWorkflowErrors,
  GetWorkflowVersionData,
  GetWorkflowVersionResponses,
  GetWorkflowVersionErrors,
  ListWorkflowSessionsData,
  ListWorkflowSessionsResponses,
  ListWorkflowSessionsErrors,
  GetWorkflowHistoryData,
  GetWorkflowHistoryResponses,
  GetWorkflowHistoryErrors,
  ListTasksData,
  ListTasksResponses,
  ListTasksErrors,
  GetTableDetailsData,
  GetTableDetailsResponses,
  GetWorkflowSessionData,
  GetWorkflowSessionResponses,
  GetWorkflowSessionErrors,
  ListFormsData,
  ListFormsResponses,
  ListFormsErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Unpublish Workflow
 * Unpublish an existing workflow, making it unavailable for normal execution. This changes the status of the currently published version and makes only the draft version available. Useful for taking workflows offline for any reason.
 */
export const unpublishWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<UnpublishWorkflowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UnpublishWorkflowResponses,
    UnpublishWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/unpublish",
    ...options,
  });
};

/**
 * Run Workflow
 * Execute a workflow starting from a specified component with optional placeholder values. Supports both production runs and test runs of draft versions. Validates component existence and placeholder types before execution. Returns session details for tracking workflow progress. Can be used to restart workflows with data from previous sessions.
 */
export const runWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<RunWorkflowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RunWorkflowResponses,
    RunWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/run",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Rerun Workflow
 * Reruns a workflow component from an existing session and copies placeholders from the provided workflow session
 */
export const rerunWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<RerunWorkflowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RerunWorkflowResponses,
    RerunWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/rerun",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Publish Workflow
 * Publish an existing workflow DRAFT, making it available for production execution. Adds a comment and description to document the publication. Creates a new published version and increments the draft version number.
 */
export const publishWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<PublishWorkflowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PublishWorkflowResponses,
    PublishWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/publish",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List Tables
 * Get a paginated list of all tables for a client.
 */
export const listTables = <ThrowOnError extends boolean = false>(
  options?: Options<ListTablesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListTablesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/table",
    ...options,
  });
};

/**
 * Create Table
 * Create a new Table with the given name and columns
 */
export const createTable = <ThrowOnError extends boolean = false>(
  options: Options<CreateTableData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateTableResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/table",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const renameColumn = <ThrowOnError extends boolean = false>(
  options: Options<RenameColumnData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RenameColumnResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/table/{tableId}/rename/{originalColumnName}",
    ...options,
  });
};

export const deleteColumn = <ThrowOnError extends boolean = false>(
  options: Options<DeleteColumnData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DeleteColumnResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/table/{tableId}/delete/{columnName}",
    ...options,
  });
};

/**
 * Add Column
 * Add a new column to an existing table
 */
export const addColumn = <ThrowOnError extends boolean = false>(
  options: Options<AddColumnData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AddColumnResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/table/{tableId}/add/{columnName}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Terminate Entire Session
 * Immediately stop and terminate an entire workflow session, ending execution of all active components and preventing any further processing. Useful for canceling long-running workflows or stopping erroneous executions. Returns confirmation of termination status.
 */
export const terminateEntireSession = <ThrowOnError extends boolean = false>(
  options: Options<TerminateEntireSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TerminateEntireSessionResponses,
    TerminateEntireSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}/terminate",
    ...options,
  });
};

/**
 * Terminate Component
 * Selectively terminate a specific component thread within a workflow session while allowing other components to continue running. Provides granular control over workflow execution by targeting individual components or threads. Useful for stopping problematic components without affecting the entire workflow.
 */
export const terminateComponent = <ThrowOnError extends boolean = false>(
  options: Options<TerminateComponentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TerminateComponentResponses,
    TerminateComponentErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}/terminate/{componentId}/thread/{threadId}",
    ...options,
  });
};

/**
 * Terminate Component
 * Selectively terminate a specific component thread within a workflow session while allowing other components to continue running. Provides granular control over workflow execution by targeting individual components or threads. Useful for stopping problematic components without affecting the entire workflow.
 */
export const terminateComponent1 = <ThrowOnError extends boolean = false>(
  options: Options<TerminateComponent1Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TerminateComponent1Responses,
    TerminateComponent1Errors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}/terminate/{componentId}",
    ...options,
  });
};

/**
 * Retry Failed Component
 * Restart execution of a failed component and continue the workflow from that point forward. Automatically resumes processing from the specified component using existing session data and placeholder values. Essential for recovering from transient failures or errors without restarting the entire workflow.
 */
export const retryFailedComponent = <ThrowOnError extends boolean = false>(
  options: Options<RetryFailedComponentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RetryFailedComponentResponses,
    RetryFailedComponentErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}/retry/{componentId}",
    ...options,
  });
};

/**
 * Retry Failed Component
 * Restart execution of a failed component and continue the workflow from that point forward. Automatically resumes processing from the specified component using existing session data and placeholder values. Essential for recovering from transient failures or errors without restarting the entire workflow.
 */
export const retryFailedComponent1 = <ThrowOnError extends boolean = false>(
  options: Options<RetryFailedComponent1Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RetryFailedComponent1Responses,
    RetryFailedComponent1Errors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}/retry/{componentId}/thread/{threadId}",
    ...options,
  });
};

/**
 * List Workflows
 * Get a paginated list of workflow summaries including workflow IDs, names, publication status, draft versions, and navigation links. Returns structured metadata for each workflow with pagination controls and links to detailed workflow information.
 */
export const listWorkflows = <ThrowOnError extends boolean = false>(
  options?: Options<ListWorkflowsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListWorkflowsResponses,
    ListWorkflowsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow",
    ...options,
  });
};

/**
 * Get Workflow
 * Get comprehensive workflow details including metadata (ID, version, status, name), full workflow description with purpose and use cases, complete component definitions with types and descriptions, placeholder mappings for data flow between components, component connections and relationships, and links to related workflow operations like session management
 */
export const getWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkflowResponses,
    GetWorkflowErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}",
    ...options,
  });
};

/**
 * Get Workflow Version
 * Get comprehensive workflow details including metadata (ID, version, status, name), full workflow description with purpose and use cases, complete component definitions with types and descriptions, placeholder mappings for data flow between components, component connections and relationships, and links to related workflow operations like session management
 */
export const getWorkflowVersion = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowVersionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkflowVersionResponses,
    GetWorkflowVersionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/{workflowVersion}",
    ...options,
  });
};

/**
 * List Sessions
 * Get a paginated list of all execution sessions for a workflow, including session IDs, status, timestamps, and execution mode. Can filter between production and test runs of draft workflows. Returns user-friendly messages when no sessions exist, with pagination support for workflows with many execution histories.
 */
export const listWorkflowSessions = <ThrowOnError extends boolean = false>(
  options: Options<ListWorkflowSessionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListWorkflowSessionsResponses,
    ListWorkflowSessionsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/sessions",
    ...options,
  });
};

/**
 * Get Workflow History
 * Retrieve a paginated history of all versions for a specific workflow, including version numbers, timestamps, status changes, and metadata for each version. Useful for tracking workflow evolution and accessing previous versions.
 */
export const getWorkflowHistory = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowHistoryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkflowHistoryResponses,
    GetWorkflowHistoryErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/workflow/{workflowId}/history",
    ...options,
  });
};

/**
 * List tasks visible to the user
 * Retrieve a paginated list of all tasks that the authenticated user can see. Supports filtering by status, workflow, date range, and text search. Uses token-based pagination for efficient navigation through large result sets.
 */
export const listTasks = <ThrowOnError extends boolean = false>(
  options?: Options<ListTasksData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListTasksResponses,
    ListTasksErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/tasks",
    ...options,
  });
};

/**
 * Get Table Details
 * Get the schema details of the given table
 */
export const getTableDetails = <ThrowOnError extends boolean = false>(
  options: Options<GetTableDetailsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetTableDetailsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/table/{tableId}",
    ...options,
  });
};

/**
 * Get Session
 * Retrieve comprehensive details of a specific workflow execution session, including session status, component execution states, placeholder values, timing information, error details, and complete execution history. Essential for debugging and monitoring workflow runs.
 */
export const getWorkflowSession = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWorkflowSessionResponses,
    GetWorkflowSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/session/{sessionId}",
    ...options,
  });
};

/**
 * List all forms available to the given user
 */
export const listForms = <ThrowOnError extends boolean = false>(
  options?: Options<ListFormsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListFormsResponses,
    ListFormsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-api-key",
        type: "apiKey",
      },
    ],
    url: "/v1/forms",
    ...options,
  });
};
