// This file is auto-generated by @hey-api/openapi-ts

export type StandardWorkflow86Exception = {
  /**
   * HTTP Status code (matching the status of the response)
   */
  httpStatus?: number;
  /**
   * Error ID to be quoted in any potential support requests
   */
  errorId?: string;
  /**
   * Message containing details of the problem
   */
  message?: string;
  /**
   * Whether this issue can usefully be retried
   */
  retryable?: string;
};

export type UnpublishWorkflowResponse = {
  /**
   * UUID identifier of the workflow unpublished
   */
  workflowId?: string;
  /**
   * The new draft version number
   */
  draftVersion?: number;
};

/**
 * A command for starting a workflow
 */
export type RunWorkflowCommand = {
  /**
   * UUID identifier of the component to start running from
   */
  componentId: string;
  /**
   * Workflow version to run. It could be a integer version or 'DRAFT' or 'PUBLISHED'. If DRAFT OR PUBLISHED, will run latest version of the project with the respective status
   */
  workflowVersion?: string;
  /**
   * A object containing placeholder keys and values to override values from the original session.
   * - Keys must be from the set of placeholders available to the specified component.
   * - All keys are optional at the API level, but omitting them may of course cause the workflow to fail.
   * - Values are validated against the placeholder type.
   * - datetime placeholders MUST be in ISO-8601 format, but may omit timezone, offset, or the whole time portion.
   * - list placeholders MUST EITHER be sent as a JSON List or a Bracketed String (see example).
   * - Values may not be sent as JSON objects, instead keys should use dotted form.
   */
  placeholderValues?: {
    [key: string]: {
      [key: string]: unknown;
    };
  };
};

/**
 * A response when starting a workflow
 */
export type RunWorkflowResponse = {
  /**
   * UUID identifier of the session started
   */
  sessionId?: string;
  /**
   * The execution mode of session started
   */
  sessionMode?: "PROD" | "TEST";
  /**
   * UUID identifier of the workflow started (echoed)
   */
  workflowId?: string;
  /**
   * The integer version of the workflow started (echoed)
   */
  workflowVersion?: number;
  /**
   * UUID identifier of the component started (echoed)
   */
  componentId?: string;
  /**
   * The URL to view this workflow in a browser (requires login)
   */
  workflowAppViewUrl?: string;
  /**
   * The URL to view this session in a browser (requires login)
   */
  sessionAppViewUrl?: string;
  /**
   * Normalized values of the placeholders provided in the input
   */
  placeholderValues?: {
    [key: string]: string;
  };
  /**
   * Session id the workflow ran from
   */
  originalSessionId?: string;
  _links?: {
    [key: string]: string;
  };
};

/**
 * A command for rerunning a workflow from an existing session
 */
export type RerunWorkflowCommand = {
  /**
   * UUID identifier of the component to start running from
   */
  componentId: string;
  /**
   * Workflow version to run. It could be a integer version or 'DRAFT' or 'PUBLISHED'. If DRAFT OR PUBLISHED, will run latest version of the project with the respective status
   */
  workflowVersion?: string;
  /**
   * The session ID that this workflow is running from. Will also use all the placeholder values from this session
   */
  originalSessionId: string;
};

export type PublishWorkflowCommand = {
  /**
   * Comment describing the changes in this publication
   */
  comment?: string;
  /**
   * Normative description of this workflow
   */
  description?: string;
};

export type PublishWorkflowResponse = {
  /**
   * UUID identifier of the workflow published
   */
  workflowId?: string;
  /**
   * The new published version number
   */
  publishedVersion?: number;
  /**
   * The new draft version number
   */
  draftVersion?: number;
};

/**
 * Response for generate-workflow-plan API that generates a workflow edit plan
 */
export type GenerateWorkflowResponse = {
  /**
   * Session ID created for polling the result. Present when success is true
   */
  sessionId?: string;
  _links?: {
    [key: string]: string;
  };
};

/**
 * Array of column definitions
 */
export type CreateColumnCommand = {
  /**
   * The column name
   */
  columnName: string;
  /**
   * The column type
   */
  columnType: "DECIMAL" | "VARCHAR2" | "BOOLEAN" | "DATETIME" | "LIST";
};

export type CreateTableCommand = {
  /**
   * The name of the table to create
   */
  tableName: string;
  /**
   * Array of column definitions
   */
  columns: Array<CreateColumnCommand>;
};

/**
 * The columns in the schema of this Table
 */
export type ColumnDetails = {
  /**
   * The UUID identifier of the column
   */
  columnId: string;
  /**
   * The column name
   */
  columnName: string;
  /**
   * The column type
   */
  columnType: "DECIMAL" | "VARCHAR2" | "BOOLEAN" | "DATETIME" | "LIST";
};

export type TableDetails = {
  /**
   * The id of the Workflow86 Table
   */
  tableId: string;
  /**
   * The name of the Workflow86 Table
   */
  name: string;
  /**
   * The URL to view this table in a browser (requires login)
   */
  tableAppViewUrl?: string;
  /**
   * The columns in the schema of this Table
   */
  columns: Array<ColumnDetails>;
  _links: {
    [key: string]: string;
  };
};

/**
 * Flattened representation of the component result graph
 */
export type ComponentResult = {
  /**
   * UUID identifier of this Component Result
   */
  resultId: string;
  /**
   * UUID identifier of the Component this result is for
   */
  componentId: string;
  /**
   * The type of the Component this result is for
   */
  componentType: string;
  /**
   * The name of the Component this result is for
   */
  componentName: string;
  /**
   * The thread this Component was run in - either 'root' or a UUID identifier
   */
  thread: string;
  /**
   * The status of the execution of this Component
   */
  status:
    | "IN_PROGRESS"
    | "SUCCESSFUL"
    | "WAITING"
    | "FAILED"
    | "TERMINATED"
    | "OUT_OF_QUOTA";
  /**
   * The error message generated if status=FAILED
   */
  errorMessage: string;
  nodeInput: JsonNode;
  nodeOutput: JsonNode;
  /**
   * The resultIds of the following results in the result graph
   */
  nextResults: Array<string>;
  /**
   * The URL of any form waiting to be submitted to complete this Component
   */
  pendingFormAppViewUrl?: string;
  /**
   * The URL of any form that has been submitted as part of this Component's execution
   */
  submittedFormAppViewUrl?: string;
  /**
   * Timestamp when the component execution started
   */
  startedAt?: string;
  /**
   * Timestamp when the component execution was last updated
   */
  updatedAt?: string;
  _links?: {
    [key: string]: string;
  };
};

/**
 * The JSON result that was output from this execution
 */
export type JsonNode = {
  [key: string]: unknown;
};

/**
 * JSON representation of a Workflow Session
 */
export type SessionResult = {
  /**
   * UUID identifier of the session returned
   */
  sessionId: string;
  /**
   * The execution mode of this session.
   */
  sessionMode: "PROD" | "TEST";
  /**
   * The overall session status
   */
  status:
    | "IN_PROGRESS"
    | "SUCCESSFUL"
    | "WAITING"
    | "FAILED"
    | "TERMINATED"
    | "OUT_OF_QUOTA";
  /**
   * UUID identifier of the workflow this session belongs to
   */
  workflowId: string;
  /**
   * The integer version of the workflow this session belongs to
   */
  workflowVersion: number;
  /**
   * The URL to view this workflow in a browser (requires login)
   */
  workflowAppViewUrl?: string;
  /**
   * The URL to view this session in a browser (requires login)
   */
  sessionAppViewUrl?: string;
  /**
   * Timestamp when the session was started
   */
  startedAt: string;
  /**
   * Timestamp when the session was last updated
   */
  updatedAt: string;
  /**
   * Flattened representation of the component result graph
   */
  componentResults: Array<ComponentResult>;
  _links?: {
    [key: string]: string;
  };
};

/**
 * A response when retrying a failed component
 */
export type RetryWorkflowResponse = {
  /**
   * UUID identifier of the session started
   */
  sessionId?: string;
  /**
   * The execution mode of session started
   */
  sessionMode?: "PROD" | "TEST";
  /**
   * UUID identifier of the workflow started (echoed)
   */
  workflowId?: string;
  /**
   * The integer version of the workflow started (echoed)
   */
  workflowVersion?: number;
  /**
   * UUID identifier of the component started (echoed)
   */
  componentId?: string;
  /**
   * The URL to view this workflow in a browser (requires login)
   */
  workflowAppViewUrl?: string;
  /**
   * The URL to view this session in a browser (requires login)
   */
  sessionAppViewUrl?: string;
  /**
   * UUID identifier of the thread being retried. Defaults to 'root' if no thread is given or needed
   */
  threadId?: string;
  _links?: {
    [key: string]: string;
  };
};

export type PageOfWorkflowSummary = {
  /**
   * The page of response data as an array
   */
  _embedded: Array<WorkflowSummary>;
  /**
   * The zero-indexed page number of the response data
   */
  _pageNumber: number;
  /**
   * True iff this page is the final page
   */
  _lastPage: boolean;
  /**
   * Total number of results matching the query
   */
  get_totalCount?: number;
  _links: {
    [key: string]: string;
  };
};

/**
 * The page of response data as an array
 */
export type WorkflowSummary = {
  /**
   * UUID identifier of this workflow
   */
  workflowId: string;
  /**
   * The name of this workflow
   */
  name: string;
  /**
   * The description of this workflow
   */
  description: string;
  /**
   * true if this workflow has been published, false if this workflow is still in draft
   */
  published: boolean;
  /**
   * The integer version of this workflows current draft
   */
  draftVersion: number;
  /**
   * The integer version of this workflows current published version, if it has been published"
   */
  publishedVersion?: number;
  _links: {
    [key: string]: string;
  };
};

/**
 * The components that make up this workflow
 */
export type ComponentDetails = {
  /**
   * UUID identifier of the Component
   */
  componentId: string;
  /**
   * Type of the Component
   */
  type: string;
  /**
   * Name of the Component
   */
  name: string;
  /**
   * Description of the Component
   */
  description: string;
  /**
   * UUID IDs of the components that will be executed after this one
   */
  nextComponents: Array<string>;
  /**
   * Placeholders used as input by this component
   */
  inputPlaceholders: {
    [key: string]: string;
  };
  /**
   * Component-type specific configuration structure
   */
  configuration: {
    [key: string]: {
      [key: string]: unknown;
    };
  };
  /**
   * Any Validation Errors from parsing this component configuration
   */
  validationErrors: Array<string>;
};

export type WorkflowVersionDetails = {
  /**
   * UUID identifier of this workflow version
   */
  workflowId: string;
  /**
   * The integer version of this workflow version
   */
  version: number;
  /**
   * The lifecycle status of this workflow version
   */
  status: "PUBLISHED" | "DRAFT" | "ARCHIVED" | "DELETED";
  /**
   * The name of this workflow
   */
  name: string;
  /**
   * The description of this workflow
   */
  description: string;
  /**
   * The components that make up this workflow
   */
  components: Array<ComponentDetails>;
  /**
   * The tables referenced by this workflow
   */
  tables: Array<TableDetails>;
  /**
   * The URL to view this workflow in a browser (requires login)
   */
  workflowAppViewUrl: string;
  _links: {
    [key: string]: string;
  };
};

export type PageOfSessionSummary = {
  /**
   * The page of response data as an array
   */
  _embedded: Array<SessionSummary>;
  /**
   * The zero-indexed page number of the response data
   */
  _pageNumber: number;
  /**
   * True iff this page is the final page
   */
  _lastPage: boolean;
  /**
   * Total number of results matching the query
   */
  get_totalCount?: number;
  _links: {
    [key: string]: string;
  };
};

/**
 * The page of response data as an array
 */
export type SessionSummary = {
  /**
   * UUID identifier of the session returned
   */
  sessionId: string;
  /**
   * The execution mode of this session.
   */
  sessionMode: "PROD" | "TEST";
  /**
   * The overall session status
   */
  status:
    | "IN_PROGRESS"
    | "SUCCESSFUL"
    | "WAITING"
    | "FAILED"
    | "TERMINATED"
    | "OUT_OF_QUOTA";
  /**
   * UUID identifier of the workflow this session belongs to
   */
  workflowId: string;
  /**
   * The integer version of the workflow this session belongs to
   */
  workflowVersion: number;
  /**
   * The URL to view this workflow in a browser (requires login)
   */
  workflowAppViewUrl?: string;
  /**
   * The URL to view this session in a browser (requires login)
   */
  sessionAppViewUrl?: string;
  /**
   * Timestamp when the session was started
   */
  startedAt: string;
  /**
   * Timestamp when the session was last updated
   */
  updatedAt: string;
  _links?: {
    [key: string]: string;
  };
};

export type PageOfWorkflowHistory = {
  /**
   * The page of response data as an array
   */
  _embedded: Array<WorkflowHistory>;
  /**
   * The zero-indexed page number of the response data
   */
  _pageNumber: number;
  /**
   * True iff this page is the final page
   */
  _lastPage: boolean;
  /**
   * Total number of results matching the query
   */
  get_totalCount?: number;
  _links: {
    [key: string]: string;
  };
};

/**
 * The page of response data as an array
 */
export type WorkflowHistory = {
  /**
   * The integer version of this workflow version
   */
  version: number;
  /**
   * The name of this workflow
   */
  name: string;
  /**
   * The description of this workflow
   */
  description: string;
  /**
   * The lifecycle status of this workflow version
   */
  status: "PUBLISHED" | "DRAFT" | "ARCHIVED" | "DELETED";
  _links: {
    [key: string]: string;
  };
};

/**
 * Response for get-workflow-plan API that retrieves the status and results of a workflow plan generation
 */
export type GetWorkflowPlanResponse = {
  /**
   * Current status of the workflow plan generation
   */
  status?: "IN_PROGRESS" | "SUCCESS";
  /**
   * The ID of the workflow being generated/edited, if applicable
   */
  workflowId?: string;
  response?: WorkflowPlanResponseDto;
  /**
   * Navigation links for workflow operations
   */
  _links?: {
    [key: string]: string;
  };
};

/**
 * Parsed AI response with structured workflow plan or questions
 */
export type WorkflowPlanResponseDto = {
  chatTitle?: string;
  action?: string;
  ambiguity?: string;
  questions?: JsonNode;
  assume?: JsonNode;
  explanation?: string;
  editActionsSummary?: JsonNode;
  newPlaceholders?: JsonNode;
  obsoletePlaceholders?: JsonNode;
  newComponents?: JsonNode;
  updateComponents?: JsonNode;
  removeComponents?: JsonNode;
  newDatabases?: JsonNode;
  removeDatabases?: JsonNode;
  updatedDatabases?: JsonNode;
  end?: boolean;
};

export type PageOfTaskSummary = {
  /**
   * The page of response data as an array
   */
  _embedded: Array<TaskSummary>;
  /**
   * The zero-indexed page number of the response data
   */
  _pageNumber: number;
  /**
   * True iff this page is the final page
   */
  _lastPage: boolean;
  /**
   * Total number of results matching the query
   */
  get_totalCount?: number;
  _links: {
    [key: string]: string;
  };
};

/**
 * A summary of a task being requested. Usually comes in a list of these.
 */
export type TaskSummary = {
  /**
   * The name of the task
   */
  taskName?: string;
  /**
   * The description of the task
   */
  taskDescription?: string;
  /**
   * The workflow ID of the workflow that sent this task
   */
  workflowId?: string;
  /**
   * The name of the workflow
   */
  workflowName?: string;
  /**
   * The session ID of the session of the workflow that assigned this task
   */
  sessionId?: string;
  /**
   * The URL to open this form session in a browser (requires login)
   */
  formSessionAppViewUrl?: string;
  /**
   * The URL to open this task in a browser (requires login)
   */
  taskAppViewUrl?: string;
};

export type PageOfTableSummary = {
  /**
   * The page of response data as an array
   */
  _embedded: Array<TableSummary>;
  /**
   * The zero-indexed page number of the response data
   */
  _pageNumber: number;
  /**
   * True iff this page is the final page
   */
  _lastPage: boolean;
  /**
   * Total number of results matching the query
   */
  get_totalCount?: number;
  _links: {
    [key: string]: string;
  };
};

/**
 * The page of response data as an array
 */
export type TableSummary = {
  /**
   * The id of the Workflow86 Table
   */
  tableId: string;
  /**
   * The name of the Workflow86 Table
   */
  name: string;
  /**
   * The URL to view this table in a browser (requires login)
   */
  tableAppViewUrl?: string;
  _links: {
    [key: string]: string;
  };
};

/**
 * The page of response data as an array
 */
export type FormSummary = {
  formName?: string;
  formAppViewUrl?: string;
  workflowId?: string;
  workflowName?: string;
};

export type PageOfFormSummary = {
  /**
   * The page of response data as an array
   */
  _embedded: Array<FormSummary>;
  /**
   * The zero-indexed page number of the response data
   */
  _pageNumber: number;
  /**
   * True iff this page is the final page
   */
  _lastPage: boolean;
  /**
   * Total number of results matching the query
   */
  get_totalCount?: number;
  _links: {
    [key: string]: string;
  };
};

export type UnpublishWorkflowData = {
  body?: never;
  path: {
    workflowId: string;
  };
  query?: never;
  url: "/v1/workflow/{workflowId}/unpublish";
};

export type UnpublishWorkflowErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type UnpublishWorkflowError =
  UnpublishWorkflowErrors[keyof UnpublishWorkflowErrors];

export type UnpublishWorkflowResponses = {
  /**
   * OK
   */
  200: UnpublishWorkflowResponse;
};

export type UnpublishWorkflowResponse2 =
  UnpublishWorkflowResponses[keyof UnpublishWorkflowResponses];

export type RunWorkflowData = {
  body: RunWorkflowCommand;
  path: {
    workflowId: string;
  };
  query?: never;
  url: "/v1/workflow/{workflowId}/run";
};

export type RunWorkflowErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type RunWorkflowError = RunWorkflowErrors[keyof RunWorkflowErrors];

export type RunWorkflowResponses = {
  /**
   * OK
   */
  200: RunWorkflowResponse;
};

export type RunWorkflowResponse2 =
  RunWorkflowResponses[keyof RunWorkflowResponses];

export type RerunWorkflowData = {
  body: RerunWorkflowCommand;
  path: {
    workflowId: string;
  };
  query?: never;
  url: "/v1/workflow/{workflowId}/rerun";
};

export type RerunWorkflowErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type RerunWorkflowError = RerunWorkflowErrors[keyof RerunWorkflowErrors];

export type RerunWorkflowResponses = {
  /**
   * OK
   */
  200: RunWorkflowResponse;
};

export type RerunWorkflowResponse =
  RerunWorkflowResponses[keyof RerunWorkflowResponses];

export type PublishWorkflowData = {
  body: PublishWorkflowCommand;
  path: {
    workflowId: string;
  };
  query?: never;
  url: "/v1/workflow/{workflowId}/publish";
};

export type PublishWorkflowErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type PublishWorkflowError =
  PublishWorkflowErrors[keyof PublishWorkflowErrors];

export type PublishWorkflowResponses = {
  /**
   * OK
   */
  200: PublishWorkflowResponse;
};

export type PublishWorkflowResponse2 =
  PublishWorkflowResponses[keyof PublishWorkflowResponses];

export type GenerateWorkflowPlanData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query: {
    workflowId?: string;
    userRequirement: string;
  };
  url: "/v1/workflow/generate-workflow-plan";
};

export type GenerateWorkflowPlanErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type GenerateWorkflowPlanError =
  GenerateWorkflowPlanErrors[keyof GenerateWorkflowPlanErrors];

export type GenerateWorkflowPlanResponses = {
  /**
   * OK
   */
  200: GenerateWorkflowResponse;
};

export type GenerateWorkflowPlanResponse =
  GenerateWorkflowPlanResponses[keyof GenerateWorkflowPlanResponses];

export type ListTablesData = {
  body?: never;
  path?: never;
  query?: {
    pageNumber?: number;
  };
  url: "/v1/table";
};

export type ListTablesResponses = {
  /**
   * OK
   */
  200: PageOfTableSummary;
};

export type ListTablesResponse = ListTablesResponses[keyof ListTablesResponses];

export type CreateTableData = {
  body: CreateTableCommand;
  path?: never;
  query?: never;
  url: "/v1/table";
};

export type CreateTableResponses = {
  /**
   * OK
   */
  200: TableDetails;
};

export type CreateTableResponse =
  CreateTableResponses[keyof CreateTableResponses];

export type RenameColumnData = {
  body?: never;
  path: {
    tableId: string;
    originalColumnName: string;
  };
  query: {
    newColumnName: string;
  };
  url: "/v1/table/{tableId}/rename/{originalColumnName}";
};

export type RenameColumnResponses = {
  /**
   * OK
   */
  200: TableDetails;
};

export type RenameColumnResponse =
  RenameColumnResponses[keyof RenameColumnResponses];

export type DeleteColumnData = {
  body?: never;
  path: {
    tableId: string;
    columnName: string;
  };
  query?: never;
  url: "/v1/table/{tableId}/delete/{columnName}";
};

export type DeleteColumnResponses = {
  /**
   * OK
   */
  200: TableDetails;
};

export type DeleteColumnResponse =
  DeleteColumnResponses[keyof DeleteColumnResponses];

export type AddColumnData = {
  body: CreateColumnCommand;
  path: {
    tableId: string;
  };
  query?: never;
  url: "/v1/table/{tableId}/add/{columnName}";
};

export type AddColumnResponses = {
  /**
   * OK
   */
  200: TableDetails;
};

export type AddColumnResponse = AddColumnResponses[keyof AddColumnResponses];

export type TerminateEntireSessionData = {
  body?: never;
  path: {
    sessionId: string;
  };
  query?: never;
  url: "/v1/session/{sessionId}/terminate";
};

export type TerminateEntireSessionErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type TerminateEntireSessionError =
  TerminateEntireSessionErrors[keyof TerminateEntireSessionErrors];

export type TerminateEntireSessionResponses = {
  /**
   * OK
   */
  200: SessionResult;
};

export type TerminateEntireSessionResponse =
  TerminateEntireSessionResponses[keyof TerminateEntireSessionResponses];

export type TerminateComponentData = {
  body?: never;
  path: {
    sessionId: string;
    componentId: string;
    threadId: string;
  };
  query?: never;
  url: "/v1/session/{sessionId}/terminate/{componentId}/thread/{threadId}";
};

export type TerminateComponentErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type TerminateComponentError =
  TerminateComponentErrors[keyof TerminateComponentErrors];

export type TerminateComponentResponses = {
  /**
   * OK
   */
  200: SessionResult;
};

export type TerminateComponentResponse =
  TerminateComponentResponses[keyof TerminateComponentResponses];

export type TerminateComponent1Data = {
  body?: never;
  path: {
    sessionId: string;
    componentId: string;
  };
  query?: never;
  url: "/v1/session/{sessionId}/terminate/{componentId}";
};

export type TerminateComponent1Errors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type TerminateComponent1Error =
  TerminateComponent1Errors[keyof TerminateComponent1Errors];

export type TerminateComponent1Responses = {
  /**
   * OK
   */
  200: SessionResult;
};

export type TerminateComponent1Response =
  TerminateComponent1Responses[keyof TerminateComponent1Responses];

export type RetryFailedComponentData = {
  body?: never;
  path: {
    sessionId: string;
    componentId: string;
  };
  query?: never;
  url: "/v1/session/{sessionId}/retry/{componentId}";
};

export type RetryFailedComponentErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type RetryFailedComponentError =
  RetryFailedComponentErrors[keyof RetryFailedComponentErrors];

export type RetryFailedComponentResponses = {
  /**
   * OK
   */
  200: RetryWorkflowResponse;
};

export type RetryFailedComponentResponse =
  RetryFailedComponentResponses[keyof RetryFailedComponentResponses];

export type RetryFailedComponent1Data = {
  body?: never;
  path: {
    sessionId: string;
    componentId: string;
    threadId: string;
  };
  query?: never;
  url: "/v1/session/{sessionId}/retry/{componentId}/thread/{threadId}";
};

export type RetryFailedComponent1Errors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type RetryFailedComponent1Error =
  RetryFailedComponent1Errors[keyof RetryFailedComponent1Errors];

export type RetryFailedComponent1Responses = {
  /**
   * OK
   */
  200: RetryWorkflowResponse;
};

export type RetryFailedComponent1Response =
  RetryFailedComponent1Responses[keyof RetryFailedComponent1Responses];

export type ListWorkflowsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Optional parameter to filter results by publication status
     */
    status?: "ALL" | "PUBLISHED";
    pageNumber?: number;
  };
  url: "/v1/workflow";
};

export type ListWorkflowsErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type ListWorkflowsError = ListWorkflowsErrors[keyof ListWorkflowsErrors];

export type ListWorkflowsResponses = {
  /**
   * OK
   */
  200: PageOfWorkflowSummary;
};

export type ListWorkflowsResponse =
  ListWorkflowsResponses[keyof ListWorkflowsResponses];

export type GetWorkflowData = {
  body?: never;
  path: {
    workflowId: string;
  };
  query?: never;
  url: "/v1/workflow/{workflowId}";
};

export type GetWorkflowErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type GetWorkflowError = GetWorkflowErrors[keyof GetWorkflowErrors];

export type GetWorkflowResponses = {
  /**
   * OK
   */
  200: WorkflowVersionDetails;
};

export type GetWorkflowResponse =
  GetWorkflowResponses[keyof GetWorkflowResponses];

export type GetWorkflowVersionData = {
  body?: never;
  path: {
    workflowId: string;
    /**
     * PUBLISHED, DRAFT, or an integer workflow version
     */
    workflowVersion: string;
  };
  query?: never;
  url: "/v1/workflow/{workflowId}/{workflowVersion}";
};

export type GetWorkflowVersionErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type GetWorkflowVersionError =
  GetWorkflowVersionErrors[keyof GetWorkflowVersionErrors];

export type GetWorkflowVersionResponses = {
  /**
   * OK
   */
  200: WorkflowVersionDetails;
};

export type GetWorkflowVersionResponse =
  GetWorkflowVersionResponses[keyof GetWorkflowVersionResponses];

export type ListWorkflowSessionsData = {
  body?: never;
  path: {
    workflowId: string;
  };
  query?: {
    /**
     * Optional filter to return PROD or TEST sessions
     */
    sessionMode?: "PROD" | "TEST";
    pageNumber?: number;
  };
  url: "/v1/workflow/{workflowId}/sessions";
};

export type ListWorkflowSessionsErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type ListWorkflowSessionsError =
  ListWorkflowSessionsErrors[keyof ListWorkflowSessionsErrors];

export type ListWorkflowSessionsResponses = {
  /**
   * OK
   */
  200: PageOfSessionSummary;
};

export type ListWorkflowSessionsResponse =
  ListWorkflowSessionsResponses[keyof ListWorkflowSessionsResponses];

export type GetWorkflowHistoryData = {
  body?: never;
  path: {
    workflowId: string;
  };
  query?: {
    pageNumber?: number;
  };
  url: "/v1/workflow/{workflowId}/history";
};

export type GetWorkflowHistoryErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type GetWorkflowHistoryError =
  GetWorkflowHistoryErrors[keyof GetWorkflowHistoryErrors];

export type GetWorkflowHistoryResponses = {
  /**
   * OK
   */
  200: PageOfWorkflowHistory;
};

export type GetWorkflowHistoryResponse =
  GetWorkflowHistoryResponses[keyof GetWorkflowHistoryResponses];

export type GetWorkflowPlanData = {
  body?: never;
  path?: never;
  query: {
    sessionId: string;
  };
  url: "/v1/workflow/get-workflow-plan";
};

export type GetWorkflowPlanErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type GetWorkflowPlanError =
  GetWorkflowPlanErrors[keyof GetWorkflowPlanErrors];

export type GetWorkflowPlanResponses = {
  /**
   * OK
   */
  200: GetWorkflowPlanResponse;
};

export type GetWorkflowPlanResponse2 =
  GetWorkflowPlanResponses[keyof GetWorkflowPlanResponses];

export type ListTasksData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Text search query to filter tasks by content
     */
    queryString?: string;
    /**
     * Filter tasks by specific workflow ID
     */
    workflowId?: string;
    /**
     * Array of task statuses to include in results
     */
    statusToInclude?: string;
    /**
     * Start date for assignment date filter (ISO format)
     */
    startDate?: string;
    /**
     * End date for assignment date filter (ISO format)
     */
    endDate?: string;
    /**
     * Pagination token in format 'dateAssigned:taskId' from previous response
     */
    lastTaskToken?: string;
  };
  url: "/v1/tasks";
};

export type ListTasksErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type ListTasksError = ListTasksErrors[keyof ListTasksErrors];

export type ListTasksResponses = {
  /**
   * OK
   */
  200: PageOfTaskSummary;
};

export type ListTasksResponse = ListTasksResponses[keyof ListTasksResponses];

export type GetTableDetailsData = {
  body?: never;
  path: {
    tableId: string;
  };
  query?: never;
  url: "/v1/table/{tableId}";
};

export type GetTableDetailsResponses = {
  /**
   * OK
   */
  200: TableDetails;
};

export type GetTableDetailsResponse =
  GetTableDetailsResponses[keyof GetTableDetailsResponses];

export type GetWorkflowSessionData = {
  body?: never;
  path: {
    sessionId: string;
  };
  query?: never;
  url: "/v1/session/{sessionId}";
};

export type GetWorkflowSessionErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type GetWorkflowSessionError =
  GetWorkflowSessionErrors[keyof GetWorkflowSessionErrors];

export type GetWorkflowSessionResponses = {
  /**
   * OK
   */
  200: SessionResult;
};

export type GetWorkflowSessionResponse =
  GetWorkflowSessionResponses[keyof GetWorkflowSessionResponses];

export type ListFormsData = {
  body?: never;
  path?: never;
  query?: {
    pageNumber?: number;
  };
  url: "/v1/forms";
};

export type ListFormsErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type ListFormsError = ListFormsErrors[keyof ListFormsErrors];

export type ListFormsResponses = {
  /**
   * OK
   */
  200: PageOfFormSummary;
};

export type ListFormsResponse = ListFormsResponses[keyof ListFormsResponses];

export type DeleteComponentData = {
  body?: never;
  path: {
    workflowId: string;
    componentId: string;
  };
  query?: never;
  url: "/v1/workflow/{workflowId}/component/{componentId}";
};

export type DeleteComponentErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type DeleteComponentError =
  DeleteComponentErrors[keyof DeleteComponentErrors];

export type DeleteComponentResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ClientOptions = {
  baseUrl: `${string}://rest.workflow86.com` | (string & {});
};
