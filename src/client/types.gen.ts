// This file is auto-generated by @hey-api/openapi-ts

/**
 * Base command for workflow execution operations
 */
export type BaseWorkflowCommand = {
  /**
   * UUID identifier of the component to start running from
   */
  componentId: string;

  /**
   * Optional workflow version to run. If not provided, uses latest version
   */
  workflowVersion?: string;
};

/**
 * A command for starting a workflow
 */
export type RunWorkflowCommand = BaseWorkflowCommand & {
  /**
   * Optional project version to run. If not provided, uses latest version based on session mode.
   */
  projectVersion?: string;
  /**
   * Optional project session ID to copy placeholder values from.
   */
  projectSessionId?: string;

  /**
   * A object containing placeholder keys and values.
   * - Keys must be from the set of placeholders available to the specified component.
   * - All keys are optional at the API level, but omitting them may of course cause the workflow to fail.
   * - Values are validated against the placeholder type.
   * - datetime placeholders MUST be in ISO-8601 format, but may omit timezone, offset, or the whole time portion.
   * - list placeholders MUST EITHER be sent as a JSON List or a Bracketed String (see example).
   * - Values may not be sent as JSON objects, instead keys should use dotted form.
   */
  placeholderValues?: {
    [key: string]: {
      [key: string]: unknown;
    };
  };
};

/**
 * A command for rerunning a workflow
 */
export type RerunWorkflowCommand = BaseWorkflowCommand & {
  /**
   * Required project session ID to copy placeholder values from.
   */
  originalSessionId: string;
};

export type StandardWorkflow86Exception = {
  /**
   * HTTP Status code (matching the status of the response)
   */
  httpStatus?: number;
  /**
   * Error ID to be quoted in any potential support requests
   */
  errorId?: string;
  /**
   * Message containing details of the problem
   */
  message?: string;
};

/**
 * A response when starting a workflow
 */
export type RunWorkflowResponse = {
  /**
   * UUID identifier of the session started
   */
  sessionId?: string;
  /**
   * The execution mode of session started
   */
  sessionMode?: "PROD" | "TEST";
  /**
   * URL to poll for session progress details
   */
  sessionUrl?: string;
  /**
   * UUID identifier of the workflow started (echoed)
   */
  workflowId?: string;
  /**
   * The integer version of the workflow started (echoed)
   */
  workflowVersion?: number;
  /**
   * UUID identifier of the component started (echoed)
   */
  componentId?: string;
  /**
   * Normalized values of the placeholders provided in the input
   */
  placeholderValues?: {
    [key: string]: string;
  };
  _links?: {
    [key: string]: string;
  };
};

/**
 * Flattened representation of the component result graph
 */
export type ComponentResult = {
  /**
   * UUID id of this Component Result
   */
  resultId: string;
  /**
   * UUID id of the Component this result is for
   */
  componentId: string;
  /**
   * The type of the Component this result is for
   */
  componentType: string;
  /**
   * The name of the Component this result is for
   */
  componentName: string;
  /**
   * The thread this Component was run in - either 'root' or a UUID id
   */
  thread: string;
  /**
   * The status of the execution of this Component
   */
  status:
    | "IN_PROGRESS"
    | "SUCCESSFUL"
    | "WAITING"
    | "FAILED"
    | "TERMINATED"
    | "OUT_OF_QUOTA";
  /**
   * The error message generated if status=FAILED
   */
  errorMessage: string;
  nodeInput: JsonNode;
  nodeOutput: JsonNode;
  /**
   * The resultIds of the following results in the result graph
   */
  nextResults: Array<string>;
  /**
   * The URL of any form waiting to be submitted to complete this Component
   */
  pendingFormUrl?: string;
  /**
   * The URL of any form that has been submitted as part of this Component's execution
   */
  submittedFormUrl?: string;
  startedAt?: string;
  updatedAt?: string;
  _links?: {
    [key: string]: string;
  };
};

/**
 * The JSON result that was output from this execution
 */
export type JsonNode = {
  [key: string]: unknown;
};

/**
 * JSON representation of a Workflow Session
 */
export type SessionResult = {
  /**
   * UUID id of the session returned
   */
  sessionId: string;
  /**
   * The execution mode of this session.
   */
  sessionMode: "PROD" | "TEST";
  /**
   * The overall session status
   */
  status:
    | "IN_PROGRESS"
    | "SUCCESSFUL"
    | "WAITING"
    | "FAILED"
    | "TERMINATED"
    | "OUT_OF_QUOTA";
  /**
   * UUID id of the workflow this session belongs to
   */
  workflowId: string;
  /**
   * The integer version of the workflow this session belongs to
   */
  workflowVersion: number;
  startedAt?: string;
  updatedAt?: string;
  /**
   * Flattened representation of the component result graph
   */
  componentResults: Array<ComponentResult>;
  _links?: {
    [key: string]: string;
  };
};

/**
 * A response when retrying a failed component
 */
export type RetryWorkflowResponse = {
  /**
   * UUID identifier of the session started
   */
  sessionId?: string;
  /**
   * The execution mode of session started
   */
  sessionMode?: "PROD" | "TEST";
  /**
   * URL to poll for session progress details
   */
  sessionUrl?: string;
  /**
   * UUID identifier of the workflow started (echoed)
   */
  workflowId?: string;
  /**
   * The integer version of the workflow started (echoed)
   */
  workflowVersion?: number;
  /**
   * UUID identifier of the component started (echoed)
   */
  componentId?: string;
  /**
   * UUID identifier of the thread being retried. Defaults to 'root' if no thread is given or needed
   */
  threadId?: string;
  _links?: {
    [key: string]: string;
  };
};

export type PageOfWorkflowSummary = {
  /**
   * The page of response data as an array
   */
  _embedded: Array<WorkflowSummary>;
  /**
   * The zero-indexed page number of the response data
   */
  _pageNumber: number;
  /**
   * True iff this page is the final page
   */
  _lastPage: boolean;
  _links: {
    [key: string]: string;
  };
};

/**
 * The page of response data as an array
 */
export type WorkflowSummary = {
  /**
   * UUID id of this workflow
   */
  workflowId: string;
  /**
   * The name of this workflow
   */
  name: string;
  /**
   * The description of this workflow
   */
  description: string;
  /**
   * true if this workflow has been published, false if this workflow is still in draft
   */
  published: boolean;
  /**
   * The integer version of this workflows current draft
   */
  draftVersion: number;
  /**
   * The integer version of this workflows current published version, if it has been published"
   */
  publishedVersion?: number;
  _links: {
    [key: string]: string;
  };
};

/**
 * The components that make up this workflow
 */
export type ComponentDetails = {
  /**
   * UUID id of the Component
   */
  componentId: string;
  /**
   * Type of the Component
   */
  type: string;
  /**
   * Name of the Component
   */
  name: string;
  /**
   * Description of the Component
   */
  description: string;
  /**
   * UUID IDs of the components that will be executed after this one
   */
  nextComponents: Array<string>;
  /**
   * Placeholders used as input by this component
   */
  placeholders: {
    [key: string]: string;
  };
};

export type WorkflowVersionResult = {
  /**
   * UUID id of this workflow version
   */
  workflowId: string;
  /**
   * The integer version of this workflow version
   */
  version: number;
  /**
   * The lifecycle status of this workflow version
   */
  status: "PUBLISHED" | "DRAFT" | "ARCHIVED" | "DELETED";
  /**
   * The name of this workflow
   */
  name: string;
  /**
   * The description of this workflow
   */
  description: string;
  /**
   * The components that make up this workflow
   */
  components: Array<ComponentDetails>;
  _links: {
    [key: string]: string;
  };
};

export type PageOfSessionSummary = {
  /**
   * The page of response data as an array
   */
  _embedded: Array<SessionSummary>;
  /**
   * The zero-indexed page number of the response data
   */
  _pageNumber: number;
  /**
   * True iff this page is the final page
   */
  _lastPage: boolean;
  _links: {
    [key: string]: string;
  };
};

/**
 * The page of response data as an array
 */
export type SessionSummary = {
  /**
   * UUID id of the session returned
   */
  sessionId: string;
  /**
   * The execution mode of this session.
   */
  sessionMode: "PROD" | "TEST";
  /**
   * The overall session status
   */
  status:
    | "IN_PROGRESS"
    | "SUCCESSFUL"
    | "WAITING"
    | "FAILED"
    | "TERMINATED"
    | "OUT_OF_QUOTA";
  /**
   * UUID id of the workflow this session belongs to
   */
  workflowId: string;
  /**
   * The integer version of the workflow this session belongs to
   */
  workflowVersion: number;
  startedAt?: string;
  updatedAt?: string;
  _links?: {
    [key: string]: string;
  };
};

export type PageOfWorkflowHistory = {
  /**
   * The page of response data as an array
   */
  _embedded: Array<WorkflowHistory>;
  /**
   * The zero-indexed page number of the response data
   */
  _pageNumber: number;
  /**
   * True iff this page is the final page
   */
  _lastPage: boolean;
  _links: {
    [key: string]: string;
  };
};

/**
 * The page of response data as an array
 */
export type WorkflowHistory = {
  /**
   * The integer version of this workflow version
   */
  version: number;
  /**
   * The name of this workflow
   */
  name: string;
  /**
   * The description of this workflow
   */
  description: string;
  /**
   * The lifecycle status of this workflow version
   */
  status: "PUBLISHED" | "DRAFT" | "ARCHIVED" | "DELETED";
  _links: {
    [key: string]: string;
  };
};

export type RunWorkflowData = {
  body: RunWorkflowCommand;
  path: {
    workflowId: string;
  };
  query?: never;
  url: "/v1/workflow/{workflowId}/run";
};

export type RerunWorkflowData = {
  body: RerunWorkflowCommand;
  path: {
    workflowId: string;
  };
  query?: never;
  url: "/v1/workflow/{workflowId}/rerun";
};

export type RunWorkflowErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type RunWorkflowError = RunWorkflowErrors[keyof RunWorkflowErrors];

export type RunWorkflowResponses = {
  /**
   * OK
   */
  200: RunWorkflowResponse;
};

export type RunWorkflowResponse2 =
  RunWorkflowResponses[keyof RunWorkflowResponses];

export type TerminateEntireSessionData = {
  body?: never;
  path: {
    sessionId: string;
  };
  query?: never;
  url: "/v1/session/{sessionId}/terminate";
};

export type TerminateEntireSessionErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type TerminateEntireSessionError =
  TerminateEntireSessionErrors[keyof TerminateEntireSessionErrors];

export type TerminateEntireSessionResponses = {
  /**
   * OK
   */
  200: SessionResult;
};

export type TerminateEntireSessionResponse =
  TerminateEntireSessionResponses[keyof TerminateEntireSessionResponses];

export type TerminateComponentData = {
  body?: never;
  path: {
    sessionId: string;
    componentId: string;
    threadId: string;
  };
  query?: never;
  url: "/v1/session/{sessionId}/terminate/{componentId}/thread/{threadId}";
};

export type TerminateComponentErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type TerminateComponentError =
  TerminateComponentErrors[keyof TerminateComponentErrors];

export type TerminateComponentResponses = {
  /**
   * OK
   */
  200: SessionResult;
};

export type TerminateComponentResponse =
  TerminateComponentResponses[keyof TerminateComponentResponses];

export type TerminateComponent1Data = {
  body?: never;
  path: {
    sessionId: string;
    componentId: string;
  };
  query?: never;
  url: "/v1/session/{sessionId}/terminate/{componentId}";
};

export type TerminateComponent1Errors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type TerminateComponent1Error =
  TerminateComponent1Errors[keyof TerminateComponent1Errors];

export type TerminateComponent1Responses = {
  /**
   * OK
   */
  200: SessionResult;
};

export type TerminateComponent1Response =
  TerminateComponent1Responses[keyof TerminateComponent1Responses];

export type RetryFailedComponentData = {
  body?: never;
  path: {
    sessionId: string;
    componentId: string;
  };
  query?: never;
  url: "/v1/session/{sessionId}/retry/{componentId}";
};

export type RetryFailedComponentErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type RetryFailedComponentError =
  RetryFailedComponentErrors[keyof RetryFailedComponentErrors];

export type RetryFailedComponentResponses = {
  /**
   * OK
   */
  200: RetryWorkflowResponse;
};

export type RetryFailedComponentResponse =
  RetryFailedComponentResponses[keyof RetryFailedComponentResponses];

export type RetryFailedComponent1Data = {
  body?: never;
  path: {
    sessionId: string;
    componentId: string;
    threadId: string;
  };
  query?: never;
  url: "/v1/session/{sessionId}/retry/{componentId}/thread/{threadId}";
};

export type RetryFailedComponent1Errors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type RetryFailedComponent1Error =
  RetryFailedComponent1Errors[keyof RetryFailedComponent1Errors];

export type RetryFailedComponent1Responses = {
  /**
   * OK
   */
  200: RetryWorkflowResponse;
};

export type RetryFailedComponent1Response =
  RetryFailedComponent1Responses[keyof RetryFailedComponent1Responses];

export type ListWorkflowsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Optional parameter to filter results by publication status
     */
    status?: "ALL" | "PUBLISHED";
    pageNumber?: number;
  };
  url: "/v1/workflow";
};

export type ListWorkflowsErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type ListWorkflowsError = ListWorkflowsErrors[keyof ListWorkflowsErrors];

export type ListWorkflowsResponses = {
  /**
   * OK
   */
  200: PageOfWorkflowSummary;
};

export type ListWorkflowsResponse =
  ListWorkflowsResponses[keyof ListWorkflowsResponses];

export type GetWorkflowData = {
  body?: never;
  path: {
    workflowId: string;
  };
  query?: never;
  url: "/v1/workflow/{workflowId}";
};

export type GetWorkflowErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type GetWorkflowError = GetWorkflowErrors[keyof GetWorkflowErrors];

export type GetWorkflowResponses = {
  /**
   * OK
   */
  200: WorkflowVersionResult;
};

export type GetWorkflowResponse =
  GetWorkflowResponses[keyof GetWorkflowResponses];

export type GetWorkflowVersionData = {
  body?: never;
  path: {
    workflowId: string;
    /**
     * PUBLISHED, DRAFT, or an integer workflow version
     */
    workflowVersion: string;
  };
  query?: never;
  url: "/v1/workflow/{workflowId}/{workflowVersion}";
};

export type GetWorkflowVersionErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type GetWorkflowVersionError =
  GetWorkflowVersionErrors[keyof GetWorkflowVersionErrors];

export type GetWorkflowVersionResponses = {
  /**
   * OK
   */
  200: WorkflowVersionResult;
};

export type GetWorkflowVersionResponse =
  GetWorkflowVersionResponses[keyof GetWorkflowVersionResponses];

export type ListWorkflowSessionsData = {
  body?: never;
  path: {
    workflowId: string;
  };
  query?: {
    /**
     * Optional filter to return PROD or TEST sessions
     */
    sessionMode?: "PROD" | "TEST";
    pageNumber?: number;
  };
  url: "/v1/workflow/{workflowId}/sessions";
};

export type ListWorkflowSessionsErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type ListWorkflowSessionsError =
  ListWorkflowSessionsErrors[keyof ListWorkflowSessionsErrors];

export type ListWorkflowSessionsResponses = {
  /**
   * OK
   */
  200: PageOfSessionSummary;
};

export type ListWorkflowSessionsResponse =
  ListWorkflowSessionsResponses[keyof ListWorkflowSessionsResponses];

export type GetWorkflowHistoryData = {
  body?: never;
  path: {
    workflowId: string;
  };
  query?: {
    pageNumber?: number;
  };
  url: "/v1/workflow/{workflowId}/history";
};

export type GetWorkflowHistoryErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type GetWorkflowHistoryError =
  GetWorkflowHistoryErrors[keyof GetWorkflowHistoryErrors];

export type GetWorkflowHistoryResponses = {
  /**
   * OK
   */
  200: PageOfWorkflowHistory;
};

export type GetWorkflowHistoryResponse =
  GetWorkflowHistoryResponses[keyof GetWorkflowHistoryResponses];

export type GetWorkflowSessionData = {
  body?: never;
  path: {
    sessionId: string;
  };
  query?: never;
  url: "/v1/session/{sessionId}";
};

export type GetWorkflowSessionErrors = {
  /**
   * General validation errors
   */
  400: StandardWorkflow86Exception;
  /**
   * No API Key header provided
   */
  401: StandardWorkflow86Exception;
  /**
   * The provided API Key was invalid, or deleted
   */
  403: StandardWorkflow86Exception;
  /**
   * Entity not found, or deleted
   */
  410: StandardWorkflow86Exception;
  /**
   * All unexpected errors, and outages
   */
  500: StandardWorkflow86Exception;
};

export type GetWorkflowSessionError =
  GetWorkflowSessionErrors[keyof GetWorkflowSessionErrors];

export type GetWorkflowSessionResponses = {
  /**
   * OK
   */
  200: SessionResult;
};

export type GetWorkflowSessionResponse =
  GetWorkflowSessionResponses[keyof GetWorkflowSessionResponses];

export type ClientOptions = {
  baseUrl: `${string}://rest.workflow86.com` | (string & {});
};
